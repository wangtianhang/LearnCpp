#version 410 core

// Per-vertex inputs
layout (location = 0) in vec4 position;
layout (location = 3) in vec3 normal;

// Matrices we'll need
//layout (std140) uniform constants
//{
//    mat4 mv_matrix;
//    mat4 view_matrix;
//    mat4 proj_matrix;
//};
uniform mat4 mv_matrix;
uniform mat4 view_matrix;
uniform mat4 proj_matrix;
uniform mat4 modelToWorldMatrix;
uniform mat4 worldToLightViewAndProject_matrix;

// Inputs from vertex shader
out VS_OUT
{
	vec4 shadow_coord;
    vec3 N;
    vec3 L;
    vec3 V;
} vs_out;

// Position of light
uniform vec3 light_dir = vec3(0.0, 0.0, 0.0);

void main(void)
{
	vec4 worldPos = modelToWorldMatrix * position;

    // Calculate view-space coordinate
    vec4 P = view_matrix * worldPos;

    // Calculate normal in view-space
    vs_out.N = mat3(mv_matrix) * normal;

    // Calculate light vector
    vs_out.L = mat3(view_matrix) * (-light_dir);

    // Calculate view vector
    vs_out.V = -P.xyz;

    // Calculate the clip-space position of each vertex
    gl_Position = proj_matrix * P;
	//gl_Position = worldToLightViewAndProject_matrix * worldPos;
	// Light-space coordinates
	
    vs_out.shadow_coord = worldToLightViewAndProject_matrix * worldPos;
}
